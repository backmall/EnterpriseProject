<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Register</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans:wght@700&family=Poppins:wght@400;500;600&display=swap');
        *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
        }
        body{
        margin: 0;
        padding: 0;
        background: linear-gradient(120deg,#2980b9, #8e44ad);
        height: 100vh;
        overflow: hidden;
        }
        .center{
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 400px;
        background: white;
        border-radius: 10px;
        box-shadow: 10px 10px 15px rgba(0,0,0,0.05);
        }
        .center h1{
        text-align: center;
        padding: 20px 0;
        border-bottom: 1px solid silver;
        }
        .center form{
        padding: 0 40px;
        box-sizing: border-box;
        }
        form .txt_field{
        position: relative;
        border-bottom: 2px solid #adadad;
        margin: 30px 0;
        }
        .txt_field input{
        width: 100%;
        padding: 0 5px;
        height: 40px;
        font-size: 16px;
        border: none;
        background: none;
        outline: none;
        }
        .txt_field label{
        position: absolute;
        top: 50%;
        left: 5px;
        color: #adadad;
        transform: translateY(-50%);
        font-size: 16px;
        pointer-events: none;
        transition: .5s;
        }
        .txt_field span::before{
        content: '';
        position: absolute;
        top: 40px;
        left: 0;
        width: 0%;
        height: 2px;
        background: #2691d9;
        transition: .5s;
        }
        .txt_field input:focus ~ label,
        .txt_field input:valid ~ label, 
        .txt_field input:not(:placeholder-shown) ~ label{
        top: -5px;
        color: #2691d9;
        }
        .txt_field input:focus ~ span::before,
        .txt_field input:valid ~ span::before{
        width: 100%;
        }
        .pass{
        margin: -5px 0 20px 5px;
        color: #a6a6a6;
        cursor: pointer;
        }
        .pass:hover{
        text-decoration: underline;
        }
        input[type="submit"]{
        width: 100%;
        height: 50px;
        border: 1px solid;
        background: #2691d9;
        border-radius: 25px;
        font-size: 18px;
        color: #e9f4fb;
        font-weight: 700;
        cursor: pointer;
        outline: none;
        }
        input[type="submit"]:hover{
        border-color: #2691d9;
        transition: .5s;
        }
        .signup_link{
        margin: 30px 0;
        text-align: center;
        font-size: 16px;
        color: #666666;
        }
        .signup_link a{
        color: #2691d9;
        text-decoration: none;
        }
        .signup_link a:hover{
        text-decoration: underline;
        }

    </style>
  </head>
  <body onload="addListener()">
    <div class="center">
      <h1>Register</h1>
      <form id="registerForm" >
        <div class="txt_field">
          <input id="form-username" type="text" placeholder=" " required>
          <span></span>
          <label>Username</label>
        </div>
        <div class="txt_field">
            <input id="form-email" type="email" placeholder=" " required>
            <span></span>
            <label>e-mail</label>
          </div>
        <div class="txt_field">
          <input id="form-password" type="password" placeholder=" " required>
          <span></span>
          <label>Password</label>
        </div>
        <input type="submit" value="Register">
        <div class="signup_link">
          Already a member? <a href="/login">Login</a>
        </div>
      </form>
    </div>

    <script>
        function addListener(){
            document.getElementById("registerForm").addEventListener('submit', function(e){
                e.preventDefault();
                makeCall();
            })
        }
        function makeCall(){
            let username = document.getElementById("form-username").value;
            let email = document.getElementById("form-email").value;
            let password = document.getElementById("form-password").value;
            let data = {
                "username": username,
                "email": email,
                "password": password,
                "role": "user"
            }
            
            fetch("/auth/signup", {
                method: "POST",
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            }).catch((err) =>{
                console.log(err.statusText);
            }).then((res)=>{
                console.log(res.body.message);
                console.log(res.statusText);
                console.log(res.body);
                console.log(res.text());
                console.log(res);
            })
            
            /*
           let requestBody = new FormData();
           requestBody.append("username", username);
           requestBody.append("email", email);
           requestBody.append("password", password);
           requestBody.append("role", "user");
           console.log(requestBody);

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    console.log(this.responseText);
                }
            };
            xhttp.open("POST", "/auth/signup", true);
            xhttp.setRequestHeader('Content-type', 'application/json')
            xhttp.send(requestBody);
            */
        }
    </script>
    </body>
</html>
